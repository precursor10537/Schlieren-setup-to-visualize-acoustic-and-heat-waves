import math
from matplotlib import pyplot as plt

#Part 1
#n(x,t)=n0-(delta_n*cos(wt-kx))
#delta_n = (-1/2)*((n0)^3)*Smax*P_coeff; n0=refractive index of undisturbed medium; Smax=maximum strain induced; P_coeff = photoeleastic response coefficient 
#Smax=[Pmax*cos(wt-kx)]/B; B=Bulk modulus = 101kPa for air
#Pmax=(v*rho*w)Dmax; rho = 1.225 kg/m^3 for air

#Settings of few variables
v=343.52 #speed of sound in air (20C)
rho=1.225
B=101*(10**3)
Dmax=12*(10**-2) #assuming maximum displacement due to pressure/strain to be 9-15 (sweet spot of ultrahaptics leap)

#w=40*10^(3); %40kHz focal points generated by UHDK5
w=[]
for i in range(10**3,26*(10**4),10**3): #1Khz to 250Khz
  w.append(i)
print('Frequency Range')
print(w)

n0=1 #taking refractive index of air to be 1
P_coeff=3400*(10**-6)
n_var=[]
Pressure=[]
for i in range(len(w)):
  n_var.append((P_coeff*(n0**3)*v*rho*w[i]*Dmax)/(2*B))
  Pressure.append((v*rho*w[i]*Dmax))
print('Variation in refractive index')
print(n_var)
print('Pressure Range')
print(Pressure)

#Plotting Frequency vs Variation in Refractive Index
#plt.plot(w,n_var)
#plt.xlabel('Frequency')
#plt.ylabel('Variation in Refractive Index')

#Plotting Pressure vs Variation in Refractive Index
#plt.plot(Pressure,n_var)
#plt.xlabel('Pressure')
#plt.ylabel('Variation in Refractive Index')


#PART 2
#calculating (range of) new refractive index range
n_wave=[]
for i in range(len(w)):
    n_wave.append(n0+n_var[i])
print("Refractive index of air column")
print(n_wave)

#Calculating range of deviation angles
refraction1=[]
incidence_angles=[]
a=0
for i in range(50): #0.05 degrees to 2.5 degrees (step 0.05 degrees)
  a=a+0.05
  incidence_angles.append(a)
print('Incidence Angles')
print(len(incidence_angles))
print(incidence_angles)

for i in range(len(incidence_angles)): #iterate incidence angles
  refraction1.append([])
  for j in range(len(w)): #iterate refractive indices
      refraction1[i].append(math.degrees(math.asin((n0/n_wave[j])*math.sin(math.radians(incidence_angles[i])))))
print('Refraction Matrix 1')
print(len(refraction1))
print(len(refraction1[1]))
print(refraction1)

#Second Refraction
refraction2=[]
for i in range(len(incidence_angles)): #iterate incidence angles
  refraction2.append([])
  for j in range(len(w)): #iterate refractive indices
      refraction2[i].append(math.degrees(math.asin((n_wave[j]/n0)*math.sin(math.radians(refraction1[i][j])))))
#print('Refraction Matrix 2')
#print(len(refraction2))
#print(len(refraction2[1]))
#print(refraction2)

#PART 3
#Calculating the vertical displacement (Y-axis) for each of the 100 light rays at different refractive indices
ultra_width=15*(10**-2)
y_displacement=[]
for i in range(len(incidence_angles)): #iterate count of incidence/refraction angles
  y_displacement.append([])
  for j in range(len(w)): #iterate refractive indices
    y_displacement[i].append((math.tan(math.radians(refraction1[i][j])))*ultra_width)
print('Y-Displacement Matrix')
print(len(y_displacement))
print(len(y_displacement[1]))
print(y_displacement)

#PART 5
#Claculating the count of light rays (#n light rays at different #i incidence angles) that are being blocked and lost illuminance (delta_I) for a knife edge placed at focus of mirror 2
#Assuming the focused point image to be 2cm diameter circle and knife edge placed at 1cm
#Taking an arbitrary reference point of incidence (along diameter of circle diameter) 
#Therefore y_displacement+reference point > 1cm will be blocked by the knife edge and loose illuminance having dark and bright spots
#10**-5 variation required to detect
blocked_count=[]
check=[]
knife_edge=0.99*(10**-2) #Need to give 10**-5 threshold value because variation seen at that scale
reference_point=0.42*(10**-2)
for i in range(len(incidence_angles)): #iterate displacements for a count of incidence/refraction angles
  blocked_count.append([])
  check.append([])
  for j in range(len(w)): #iterate refractive indices
    check[i].append(y_displacement[i][j]+reference_point)
    if y_displacement[i][j]+reference_point>knife_edge:
      blocked_count[i].append(0)
    else:
      blocked_count[i].append(1)

print('Knife edge')
print(knife_edge)
print('reference point')
print(reference_point)
print('Check Matrix')
print(len(check))
print(len(check[1]))
print(check)
print('Blocked Count Matrix')
print(len(blocked_count))
print(len(blocked_count[1]))
print(blocked_count)

#PART 6
#Plotting sensitivity based on differential illuminance delta_I for the arbitrary reference point of incidence (along diameter of circle)

for i in range(len(incidence_angles)): #iterate displacements for a count of incidence/refraction angles
  zero=0
  one=0
  for j in range(len(w)): #iterate refractive indices
    if blocked_count[i][j]==0:
      zero=zero+1
    else:
      one=one+1
  #if zero>0 and one>0:
    #print("i:")
    #print(i) 
    #print(incidence_angles[i])
    #print(blocked_count[i])

differential_illuminance=[]
contrast=[] #Contrast Sensitivity Matrix holding the values dI/dP (differential illuminance/differential Pressure)
count_1=[]
count_0=[]
for j in range(len(w)):
  differential_illuminance.append(0)
  count_1.append(0)
  count_0.append(0)

for i in range(len(incidence_angles)): #iterate displacements for a count of incidence/refraction angles
  for j in range(len(w)): #iterate refractive indices
    if blocked_count[i][j]==1:
      differential_illuminance[j]=differential_illuminance[j]+1
      count_1[j]=count_1[j]+1
    else:
      differential_illuminance[j]=differential_illuminance[j]-1
      count_0[j]=count_0[j]+1
differential_illuminance=[-1*element for element in differential_illuminance]
print('Differential Illuminance Matrix (dI)')
print(differential_illuminance)
print("Count 1 and Count 0")
print(count_1)
print(count_0)

#LED_illuminance=0.32627 #candela/m^2 of one light ray
LED_illuminance=2828/(4*3.14*10) #lumen/m^2
#for i in range(len(w)):
#  contrast.append(differential_illuminance[i]/Pressure[i])
#contrast=[element*LED_illuminance for element in contrast]
#print("Contrast Matrix")
#print(contrast)

#Plotting Sensitivity vs Variation in Pressure
#plt.plot(Pressure,contrast)
#plt.xlabel('Pressure (KPa)')
#plt.ylabel('Contrast Sensitivity dI/dP (candela/m^2*KPa)')

Pressure2=[element*10**-3 for element in Pressure]
#Plotting Differential Illuminance vs Variation in Pressure
differential_illuminance2=[-1*LED_illuminance*element for element in differential_illuminance]
plt.plot(Pressure2,differential_illuminance2)
plt.xlabel('Pressure (Pa)')
plt.ylabel('Differential Illuminance dI (lumen/m^2)')

print("Values of observable variation 11 and 12")
print(differential_illuminance2[11])
print(differential_illuminance2[12])
print(Pressure[11])
print(Pressure[12])
print(Pressure[12]-Pressure[11])

print("Values of observable variation 38 and 39")
print(differential_illuminance2[11])
print(differential_illuminance2[12])
print(Pressure[11])
print(Pressure[12])
print(Pressure[12]-Pressure[11])

Sensitivity= (differential_illuminance2[12]-differential_illuminance2[11])/(Pressure[12]-Pressure[11]) #modulus of dI/dP
print("Sensitivity dI/dP (lumen/m^2*Pa):")
print(Sensitivity)
print("For every 50497.5 Pa increase in pressure we see 45.03 lumen/m^2 bright levels because light rays travel unobstructed by knife edge due to their refraction away from the knife-edge")

print(w[39])
print(Pressure2[39])
plt.show()